.row.dcUploadDesgin.product-item{ data: { id: image_item.id } }
  .edit-form.hidden
    .col-sm-3
      .row.image-block
        .relative.image-block-height
          .imageWithOverlay
            .permanentOverlayExampleImg
            .full-size-image-container.image-container{ style: "background-image: #{ css_url(image_item.medium_size_image_url) }" }
            = button_tag t('designer_center.product_items.change_image'), class: 'btn btnChangeImage', type: 'button'
            = button_tag t('designer_center.product_items.delete'), class: 'productListDeleteImage', type: 'button'
          = file_field_tag 'image[image]', class: 'hidden'
          = hidden_field_tag "contest_request[#{ image_item.kind }][image_ids][]", image_item.image_id
        %a.cancelSaveLinks.save-button{ href: '#' }= t('designer_center.final_upload.save')
        %a.cancelSaveLinks.cancel-button{ href: '#' }= t('designer_center.final_upload.cancel')
        .clearfix
    .col-sm-9
      = hidden_field_tag "contest_request[#{ image_item.kind }][ids][]", image_item.id
      - [:name, :brand, :dimensions, :price, :link].each do |attribute|
        .clearfix
          .col-sm-3.dcLabels
            = label_tag attribute, t("designer_center.final_upload.#{ attribute.to_s }")
          .col-sm-9.dcEditFields
            = text_field_tag "contest_request[#{ image_item.kind }][#{ attribute.to_s.pluralize }][]",
                ImageItemAttributeValueRenderers::Base.create(image_item, attribute, self),
                class: attribute.to_s

  .view
    .col-sm-12
      .row
        .col-sm-3.relative.image-block-height
          .full-size-image-container.image-container{ style: "background-image: #{ css_url(image_item.medium_size_image_url) }" }
          = link_to t('designer_center.final_upload.edit'), '#', class: 'dcEditDesign edit-button'
          = hidden_field_tag "contest_request[#{ image_item.kind }][image_ids][]", image_item.image_id
        .col-sm-9.dcLabels
          - [:name, :brand, :dimensions, :price].each do |attribute|
            %p{ class: attribute.to_s }
              = ImageItemAttributeValueRenderers::Base.create(image_item, attribute, self)
          = link_to image_item.link, image_item.link_href, class: 'link'
